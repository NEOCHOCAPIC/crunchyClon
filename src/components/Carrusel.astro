---
import Animes from "../data/Animes.json";
---

<div
  id="featured-anime-carousel"
  class="relative h-screen w-full overflow-hidden"
>
  {
    Animes.map((anime, index) => (
      <div
        class={` carousel-slide absolute inset-0 transition-opacity duration-500 ease-in-out ${index === 0 ? "opacity-100" : "opacity-0"} `}
        data-index={index}
      >
        <div class="absolute inset-0 w-full h-full">
          <img
            src={anime.image}
            alt={anime.title}
            class="w-full h-full object-cover"
          />
        </div>
        <div class="absolute inset-0 bg-gradient-to-r from-black to-transparent opacity-70" />
        <div class=" absolute  top-1/2  md:top-[20rem] left-0 right-0 md:pl-20 text-white z-10 flex flex-col items-center md:items-start">
          <img src={anime.logo} alt={`${anime.title} logo`} class="w-64 mb-4" />
          <p class="text-sm mb-2">{anime.rating}</p>
          <p class="text-base mb-4 max-w-2xl hidden md:block">
            {anime.description}
          </p>
          <div class="flex items-center space-x-4 mt-auto mb-4">
            <button class="bg-orange-500 hover:bg-orange-600 text-neutral-900 px-6 py-2 text-lg font-bold transition duration-300 flex items-center z-10">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="black"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="mr-2"
              >
                <path d="M5 3l14 9-14 9V3z" />
              </svg>
              COMENZAR A VER E1
            </button>
            <button class="border-[3px] border-orange-500 p-2  hover:text-black transition duration-300">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="#f29316"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-bookmark"
              >
                <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    ))
  }

  <button
    id="prev-slide"
    class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 transition-opacity z-50"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-chevron-left"
    >
      <path d="m15 18-6-6 6-6"></path>
    </svg>
  </button>

  <button
    id="next-slide"
    class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white p-2 rounded-full bg-black bg-opacity-50 hover:bg-opacity-75 transition-opacity z-50"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-chevron-right"
    >
      <path d="m9 18 6-6-6-6"></path>
    </svg>
  </button>

  <div
    id="slide-indicators"
    class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2"
  >
    {
      Animes.map((_, index) => (
        <button
          class="indicator w-3 h-3 rounded-full bg-gray-500"
          data-index={index}
        />
      ))
    }
  </div>
</div>

<script>
  // Selecciona los elementos del DOM
  const slides = document.querySelectorAll<HTMLElement>(".carousel-slide");
  const indicators = document.querySelectorAll<HTMLElement>(".indicator");
  let currentIndex: number = 0;

  // Función para mostrar el slide correspondiente
  const showSlide = (index: number): void => {
    slides.forEach((slide, i) => {
      slide.classList.toggle("opacity-100", i === index);
      slide.classList.toggle("opacity-0", i !== index);
    });

    indicators.forEach((indicator, i) => {
      indicator.classList.toggle("bg-white", i === index);
      indicator.classList.toggle("bg-gray-500", i !== index);
    });
  };

  // Función para pasar al siguiente slide
  const nextSlide = (): void => {
    currentIndex = (currentIndex + 1) % slides.length;
    showSlide(currentIndex);
  };

  // Función para regresar al slide anterior
  const prevSlide = (): void => {
    currentIndex = (currentIndex - 1 + slides.length) % slides.length;
    showSlide(currentIndex);
  };

  // Agrega los event listeners para los botones
  document.getElementById("next-slide")?.addEventListener("click", nextSlide);
  document.getElementById("prev-slide")?.addEventListener("click", prevSlide);

  // Agrega los event listeners para los indicadores
  indicators.forEach((indicator) => {
    indicator.addEventListener("click", () => {
      const index = parseInt(indicator.getAttribute("data-index") || "0");
      currentIndex = index;
      showSlide(currentIndex);
    });
  });

  // Inicializa el primer slide
  showSlide(currentIndex);
</script>
